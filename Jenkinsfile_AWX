pipeline{
     agent any
parameters {
        string(name: 'amazonIP', defaultValue: '0', description: 'IP for Amazon host')
        string(name: 'ubuntuIP', defaultValue: '0', description: 'IP for Ubuntu host')
}
    stages{
        stage('add IP for host'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'awx-cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh '''
                awx --conf.host http://35.195.62.201:30877 --conf.username $USERNAME --conf.password $PASSWORD hosts modify amazonlinux --variables "{ansible_user: ec2-user, ansible_host: ${amazonIP}}"
                awx --conf.host http://35.195.62.201:30877/ --conf.username $USERNAME --conf.password $PASSWORD hosts modify ubuntulinux --variables "{ansible_user: ubuntu, ansible_host: ${ubuntuIP}}"
                '''
                }
            }
        }
        stage('start awx job'){
            steps{
                parallel(
                    amazon: {
                        ansibleTower credential: 'aws-cred', inventory: 'geocitizene', jobTemplate: 'amazon_conf', jobType: 'run', removeColor: true, throwExceptionWhenFail: true, towerCredentialsId: 'awx-cred', towerServer: 'DevOpsSS-AWX'
                    },
                    ubuntu: {
                        ansibleTower credential: 'aws-cred', inventory: 'geocitizene', jobTemplate: 'ubuntu_conf', jobType: 'run', removeColor: true, throwExceptionWhenFail: true, towerCredentialsId: 'awx-cred', towerServer: 'DevOpsSS-AWX'
                    }
                )
            }
        }   
    }
    
    post {
        success { 
            telegramSend('JOB $JOB_NAME FINNISHED SUCCESFUL.')
        }
        failure { 
            telegramSend('JOB $JOB_NAME FAILED.')
        }
    }
}